#!/bin/bash

# Arrays for package installation
brew_packages=(
    {{ range $package := .packages.common.packages }}
    "{{ $package }}"
    {{ end -}}
    {{ range $package := .packages.brew.packages }}
    "{{ $package }}"
    {{ end -}}
)

brew_cask_packages=(
    {{ range $package := .packages.brew_cask.packages }}
    "{{ $package }}"
    {{ end }}
)

yay_packages=(
    {{ range $package := .packages.common.packages }}
    "{{ $package }}"
    {{ end -}}
    {{ range $package := .packages.yay.packages }}
    "{{ $package }}"
    {{ end }}
)

{{ if eq .chezmoi.os "linux" -}}
    echo "Installing packages with yay..."

    for package in ${yay_packages[@]}; do
        yay -S --needed --noconfirm ${package}
    done

    echo "Yay packages installed!"
{{ else if eq .chezmoi.os "darwin" -}}
    BREW_DIR="$(brew --prefix)/bin/"
    currently_installed_formulae=($(brew list --formula -1))
    currently_installed_casks=($(brew list --cask -1))

    echo "Installing packages with brew..."

    for formula in ${brew_packages[@]}; do
      if [[ ! " ${currently_installed_formulae[@]} " =~ " ${formula} " ]]; then
        if [[ ! -e "${BREW_DIR}/${formula}" ]]; then
            brew install -q --formula ${formula}
        fi
      fi
    done

    echo "Installing packages with brew cask..."

    # Function to check if app is already installed in /Applications
    app_already_installed() {
        local cask_name="$1"

        # Convert cask name to possible app name (e.g., "visual-studio-code" -> "Visual Studio Code")
        # Replace dashes with spaces and capitalize words
        local app_name=$(echo "$cask_name" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')

        # Check if app exists in /Applications
        if [[ -d "/Applications/${app_name}.app" ]]; then
            return 0  # App exists
        fi

        # Try a few variations
        local app_name_lower=$(echo "$app_name" | tr '[:upper:]' '[:lower:]')
        local app_name_upper=$(echo "$app_name" | tr '[:lower:]' '[:upper:]')

        if [[ -d "/Applications/${app_name_lower}.app" ]] || [[ -d "/Applications/${app_name_upper}.app" ]]; then
            return 0  # App exists
        fi

        return 1  # App not found
    }

    for cask in ${brew_cask_packages[@]}; do
      if [[ ! " ${currently_installed_casks[@]} " =~ " ${cask} " ]]; then
          if ! app_already_installed "${cask}"; then
              brew install -q --cask ${cask}
          else
              echo "Skipping ${cask} - already installed in /Applications"
          fi
      fi
    done

    echo "Homebrew packages installed!"
{{ end -}}
